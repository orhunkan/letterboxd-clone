// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String         @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  reviews        Review[]
  ratings        Rating[]
  watchLists     WatchList[]
  createdAt      DateTime       @default(now())
  accounts       Account[]
  sessions       Session[]
  watchedMovies  WatchedMovie[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id         Int            @id
  title      String
  posterUrl  String?
  year       Int?
  reviews    Review[]
  ratings    Rating[]
  watchedBy  WatchedMovie[]
  watchLists WatchList[]    @relation("WatchListMovies")
}

model Review {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  rating    Int?
  body      String   @db.Text
  likes     Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([authorId, movieId]) // <- TEK review kuralı
}

model WatchedMovie {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  watchedAt DateTime @default(now())

  @@unique([userId, movieId])
}

model Rating {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  value     Int // 1-5
  createdAt DateTime @default(now())

  @@unique([userId, movieId]) // tek oy kuralı
}

model WatchList {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String // “Watchlist”, “2025 Favourites” vs.
  movies    Movie[]  @relation("WatchListMovies")
  createdAt DateTime @default(now())
}
