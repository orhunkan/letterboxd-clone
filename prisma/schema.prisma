generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ------------------------------------------------------------------
   Models
-------------------------------------------------------------------*/

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?
  createdAt         DateTime           @default(now())

  reviews           Review[]
  ratings           Rating[]
  watchLists        WatchList[]
  watchedMovies     WatchedMovie[]
  watchListComments WatchListComment[] @relation("UserToWatchListComments")

  accounts          Account[]
  sessions          Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text

  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id         Int            @id
  title      String
  posterUrl  String?
  year       Int?

  reviews    Review[]
  ratings    Rating[]
  watchedBy  WatchedMovie[]
  watchLists WatchList[]    @relation("WatchListMovies")
}

model Review {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  rating    Int?
  body      String   @db.Text
  likes     Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([authorId, movieId])
}

model WatchedMovie {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  watchedAt DateTime @default(now())

  @@unique([userId, movieId])
}

model Rating {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  value     Int
  createdAt DateTime @default(now())

  @@unique([userId, movieId])
}

model WatchList {
  id                String             @id @default(cuid())
  user              User               @relation(fields: [userId], references: [id])
  userId            String
  name              String
  description       String?
  tags              String?
  visibility        Visibility         @default(PUBLIC)
  ranked            Boolean            @default(false)
  movies            Movie[]            @relation("WatchListMovies")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt @default(now())
  watchListComments WatchListComment[] @relation("WatchListToComments")
}

model WatchListComment {
  id          String    @id @default(cuid())
  body        String    @db.Text
  likes       Int       @default(0)
  createdAt   DateTime  @default(now())

  watchList   WatchList @relation("WatchListToComments", fields: [watchListId], references: [id])
  watchListId String

  user        User      @relation("UserToWatchListComments", fields: [userId], references: [id])
  userId      String
}

enum Visibility {
  PUBLIC
  PRIVATE
  FRIENDS
}
